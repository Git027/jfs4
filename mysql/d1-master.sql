-- DATABASE COMMANDS 
CREATE DATABASE WINGSOFFIRE;
USE WINGSOFFIRE;
SELECT DATABASE();

USE SAKILA;
SELECT DATABASE();

-- FETCH STATIC VALUES 
SELECT 'TODAY IS A LOVELY DAY';
-- USER DEFINED COLUMN HEADING
SELECT 'TODAY IS A LOVELY DAY' AS 'MESSAGE';
SELECT 100 + 200;
SELECT 100 + 200 AS 'TOTAL';

-- INBUILT ARITHMETIC FUNCTIONS IN MYSQL
-- SELECT <FUNCTIONANME>(<PARAMETERS, PARAMETERS>); 
SELECT PI();
SELECT TRUNCATE(1234,1);
SELECT TRUNCATE(1234,-1);
SELECT TRUNCATE(1234,0);
SELECT TRUNCATE(-1234,1);
SELECT TRUNCATE(-1234,-1);
SELECT TRUNCATE(-1234,0);
SELECT SQRT(25);

-- FETCH RECORDS FROM TABLE
SELECT * FROM ACTOR;
SELECT * FROM SAKILA.ACTOR;

-- SORT ORDER
SELECT * FROM ACTOR ORDER BY FIRST_NAME;
SELECT * FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT * FROM ACTOR ORDER BY FIRST_NAME DESC;
SELECT * FROM ACTOR ORDER BY 2 ASC;
SELECT * FROM ACTOR ORDER BY 3 DESC;

-- FILTER COLUMNS
SELECT FIRST_NAME, LAST_NAME FROM ACTOR;
SELECT LAST_NAME, FIRST_NAME FROM ACTOR;

-- FILTER ROWS
SELECT FIRST_NAME, LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'WOODY';
SELECT FIRST_NAME, LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'WOODY' AND LAST_NAME = 'JOLIE';
SELECT * FROM ACTOR WHERE ACTOR_ID > 100;

-- IP WIRTE A QUERY TO SORT LIKE THE GIVEN BELOW
-- ADAM HOPPER
-- ADAM GRANT
-- BEN WILLIS
-- BEN HARRIS

-- EMPTY RESULT SET
SELECT * FROM ACTOR WHERE FALSE;
-- IP FIND AN ALTERNATE METHOD TO ACHEIVE THE SAME RESUL

-- AGGREGATE FUNCTIONS
SELECT COUNT(*) FROM ACTOR;
SELECT * FROM ACTOR;

-- STRING OPERATIONS
SELECT 1 + 1 AS 'ADD';
SELECT 'A1' + '10' AS 'NO CONCAT';
SELECT 'A1' + '10' + '20' + 30 AS 'NO CONCAT';
SELECT 1 + NULL AS 'ADD';

SELECT CONCAT('1', 1) AS 'CONCAT';
SELECT CONCAT('A1' , '10' ) AS 'CONCAT';
SELECT CONCAT('A1' , '10', NULL ) AS 'CONCAT';
-- NULL FOR MISSING INFO
-- NO TWO NULLS ARE EQUAL

SELECT * FROM ACTOR;
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'FULL NAME' FROM ACTOR;
-- IP DISPLAY IN THE FORMAT <INITIAL.LASTNAME> P.GUINEESS
SELECT length(FIRST_NAME), FIRST_NAME AS 'FIRSTNAME SIZE' FROM ACTOR;

SELECT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT DISTINCT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME ASC;

-- IP FIND THE COUNT OF DISTINCT FIRST NAMES

-- WILD CARDS
-- SQL pattern matching enables you to use _ to match any single character and % to match 
-- an arbitrary number of characters (including zero characters). 
-- In MySQL, SQL patterns are case-insensitive by default. Some examples are shown here.
--  Do not use = or <> when you use SQL patterns.
--  Use the LIKE or NOT LIKE comparison operators instead.
-- DON'T USE 
 SELECT * FROM ACTOR WHERE FIRST_NAME = 'A%';
 SELECT * FROM ACTOR WHERE FIRST_NAME <> 'A%';
 
 -- USE
SELECT * FROM ACTOR WHERE FIRST_NAME LIKE 'A%';
SELECT * FROM ACTOR WHERE FIRST_NAME NOT LIKE 'A%';
 -- IP PRINT ALL FIRSTNAME WHICH ARE OF 5 CHARACTERS LENGTH
 
 SELECT * FROM STAFF;
 -- FIND THE GUYS WHO DO NOT HAVE PASSWORDS
-- SELECT * FROM STAFF WHERE PASSWORD = NULL; 
SELECT * FROM STAFF WHERE PASSWORD IS NULL; 
SELECT * FROM STAFF WHERE PASSWORD IS NOT NULL; 

-- FLOW CONTROL FUNCTIONS
SELECT CASE 2
WHEN 1 THEN 'PG'
WHEN 2 THEN 'NW'
END AS 'CUSTOM HEADING';

-- IP FOR OTHER VALUES FROM 1 AND 2 DISPLAY 'NOT MATCHING'
 