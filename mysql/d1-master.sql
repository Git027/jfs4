-- DATABASE COMMANDS 
CREATE DATABASE WINGSOFFIRE;
USE WINGSOFFIRE;
SELECT DATABASE();

USE SAKILA;
SELECT DATABASE();

-- FETCH STATIC VALUES 
SELECT 'TODAY IS A LOVELY DAY';
-- USER DEFINED COLUMN HEADING
SELECT 'TODAY IS A LOVELY DAY' AS 'MESSAGE';
SELECT 100 + 200;
SELECT 100 + 200 AS 'TOTAL';

-- INBUILT ARITHMETIC FUNCTIONS IN MYSQL
-- SELECT <FUNCTIONANME>(<PARAMETERS, PARAMETERS>); 
SELECT PI();
SELECT TRUNCATE(1234,1);
SELECT TRUNCATE(1234,-1);
SELECT TRUNCATE(1234,0);
SELECT TRUNCATE(-1234,1);
SELECT TRUNCATE(-1234,-1);
SELECT TRUNCATE(-1234,0);
SELECT SQRT(25);

-- FETCH RECORDS FROM TABLE
SELECT * FROM ACTOR;
SELECT * FROM SAKILA.ACTOR;

-- SORT ORDER
SELECT * FROM ACTOR ORDER BY FIRST_NAME;
SELECT * FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT * FROM ACTOR ORDER BY FIRST_NAME DESC;
SELECT * FROM ACTOR ORDER BY 2 ASC;
SELECT * FROM ACTOR ORDER BY 3 DESC;

-- FILTER COLUMNS
SELECT FIRST_NAME, LAST_NAME FROM ACTOR;
SELECT LAST_NAME, FIRST_NAME FROM ACTOR;

-- FILTER ROWS
SELECT FIRST_NAME, LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'WOODY';
SELECT FIRST_NAME, LAST_NAME FROM ACTOR WHERE FIRST_NAME = 'WOODY' AND LAST_NAME = 'JOLIE';
SELECT * FROM ACTOR WHERE ACTOR_ID > 100;

-- IP WIRTE A QUERY TO SORT LIKE THE GIVEN BELOW
-- ADAM HOPPER
-- ADAM GRANT
-- BEN WILLIS
-- BEN HARRIS

-- EMPTY RESULT SET
SELECT * FROM ACTOR WHERE FALSE;
-- IP FIND AN ALTERNATE METHOD TO ACHEIVE THE SAME RESUL

-- AGGREGATE FUNCTIONS
SELECT COUNT(*) FROM ACTOR;
SELECT * FROM ACTOR;

-- STRING OPERATIONS
SELECT 1 + 1 AS 'ADD';
SELECT 'A1' + '10' AS 'NO CONCAT';
SELECT 'A1' + '10' + '20' + 30 AS 'NO CONCAT';
SELECT 1 + NULL AS 'ADD';

SELECT CONCAT('1', 1) AS 'CONCAT';
SELECT CONCAT('A1' , '10' ) AS 'CONCAT';
SELECT CONCAT('A1' , '10', NULL ) AS 'CONCAT';
-- NULL FOR MISSING INFO
-- NO TWO NULLS ARE EQUAL

SELECT * FROM ACTOR;
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'FULL NAME' FROM ACTOR;
-- IP DISPLAY IN THE FORMAT <INITIAL.LASTNAME> P.GUINEESS
SELECT length(FIRST_NAME), FIRST_NAME AS 'FIRSTNAME SIZE' FROM ACTOR;

SELECT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT DISTINCT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME ASC;

-- IP FIND THE COUNT OF DISTINCT FIRST NAMES

-- WILD CARDS
-- SQL pattern matching enables you to use _ to match any single character and % to match 
-- an arbitrary number of characters (including zero characters). 
-- In MySQL, SQL patterns are case-insensitive by default. Some examples are shown here.
--  Do not use = or <> when you use SQL patterns.
--  Use the LIKE or NOT LIKE comparison operators instead.
-- DON'T USE 
 SELECT * FROM ACTOR WHERE FIRST_NAME = 'A%';
 SELECT * FROM ACTOR WHERE FIRST_NAME <> 'A%';
 
 -- USE
SELECT * FROM ACTOR WHERE FIRST_NAME LIKE 'A%';
SELECT * FROM ACTOR WHERE FIRST_NAME NOT LIKE 'A%';
 -- IP PRINT ALL FIRSTNAME WHICH ARE OF 5 CHARACTERS LENGTH
 
 SELECT * FROM STAFF;
 -- FIND THE GUYS WHO DO NOT HAVE PASSWORDS
-- SELECT * FROM STAFF WHERE PASSWORD = NULL; 
SELECT * FROM STAFF WHERE PASSWORD IS NULL; 
SELECT * FROM STAFF WHERE PASSWORD IS NOT NULL; 

-- FLOW CONTROL FUNCTIONS
SELECT CASE 2
WHEN 1 THEN 'PG'
WHEN 2 THEN 'NW'
END AS 'CUSTOM HEADING';

-- IP FOR OTHER VALUES FROM 1 AND 2 DISPLAY 'NOT MATCHING'

-- LOGICAL operators
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' AND ACTOR_ID = 69;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' OR ACTOR_ID = 100;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' OR ACTOR_ID < 100 OR LAST_NAME = 'TEMPLE';

-- NOT
SELECT * FROM ACTOR WHERE  ACTOR_ID = 1;
SELECT * FROM ACTOR WHERE  NOT ACTOR_ID = 1 AND NOT ACTOR_ID = 2;
SELECT * FROM ACTOR WHERE  ACTOR_ID <> 1;
-- SELECT * FROM ACTOR WHERE  ACTOR_ID NOT 1;
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH';
SELECT * FROM ACTOR WHERE (FIRST_NAME = 'KENNETH' AND ACTOR_ID < 100) OR LAST_NAME = 'TEMPLE';
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' AND (ACTOR_ID < 100 OR LAST_NAME = 'TEMPLE');
SELECT * FROM ACTOR WHERE FIRST_NAME = 'KENNETH' AND (ACTOR_ID < 100 OR LAST_NAME = 'HOFFMAN');

-- FIND ALL ACTORS WHO HAVE THE SAME LAST NAME FOR ACTOR 145.
SELECT * FROM ACTOR ORDER BY LAST_NAME;
SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145;
-- SUB QUERY WITH COMPARISON OPERATOR 
SELECT * FROM ACTOR WHERE LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145);
SELECT * FROM ACTOR WHERE LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 58);
(SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145 OR ACTOR_ID = 92);
-- 	Error Code: 1242. Subquery returns more than 1 row	0.000 sec
SELECT * FROM ACTOR WHERE LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145 OR ACTOR_ID = 92);
SELECT * FROM ACTOR WHERE LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 1450);

-- MODIFIED COMPARISON OPERATOR
SELECT * FROM ACTOR WHERE LAST_NAME =ANY (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145 OR ACTOR_ID = 92);
-- RANGE OPERATOR
SELECT * FROM ACTOR WHERE LAST_NAME IN (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145 OR ACTOR_ID = 92);
SELECT * FROM ACTOR WHERE LAST_NAME NOT IN (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145 OR ACTOR_ID = 92);

SELECT * FROM ACTOR WHERE LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE ACTOR_ID  = 145)  OR  
LAST_NAME = (SELECT LAST_NAME FROM ACTOR WHERE  ACTOR_ID = 92);
SELECT * FROM ACTOR WHERE LAST_NAME = ('ALLEN')  OR  LAST_NAME = ('AKROYD');
SELECT * FROM ACTOR WHERE LAST_NAME = 'ALLEN'  OR  LAST_NAME = 'AKROYD';
SELECT * FROM ACTOR WHERE LAST_NAME IN ( 'ALLEN','AKROYD');

SELECT * FROM sakila.actor WHERE actor_id BETWEEN 10 AND 20;
SELECT * FROM sakila.actor WHERE actor_id >= 10 AND ACTOR_ID <= 20;
SELECT * FROM sakila.actor WHERE actor_id NOT BETWEEN 10 AND 20;

-- LIKE WITH WILD CARDS
SELECT * FROM ACTOR WHERE FIRST_NAME LIKE 'A%';
SELECT *
FROM sakila.actor
WHERE first_name LIKE 'Alec%';
-- ALL ACTORS WHO HAVE THE CHARACTERS R AND A CONSECUTIVELY IN THE BEGINNING, MIDDLE OR END (ANYWHERE).
SELECT *
FROM sakila.actor
WHERE first_name LIKE '%RA%';
-- ALL ACTORS WHO MUST HAVE THE CHARACTERS R AND A (CONSECUTIVE OR NOT CONSECUTIVE) IN THE BEGINNING, MIDDLE OR END (ANYWHERE).
SELECT *
FROM sakila.actor
WHERE first_name LIKE '%R%A%';

-- ENDS WITH RA OR NAMES THAT HAS ONLY 'RA'
SELECT *
FROM sakila.actor
WHERE first_name LIKE '%RA';

SELECT *
FROM sakila.actor
WHERE first_name NOT LIKE '%RA';

SELECT *
FROM sakila.actor
WHERE first_name LIKE 'AL%';

-- 4 LETTERED NAMES THAT MUST START WITH A AND END E.
SELECT *
FROM sakila.actor
WHERE first_name LIKE 'A__E';
-- 4 OR MORE LETTERED NAMES, WITH 1ST LETTER A AND 4TH LETTER E. 
SELECT *
FROM sakila.actor
WHERE first_name LIKE 'A__E%';

-- STARTING WITH A AND SHOULD HAVE E ADJACENT OR NON ADJACENT, 2 OR MORE CHARACTERS. 
SELECT *
FROM sakila.actor
WHERE first_name LIKE 'A%E%';

UPDATE ACTOR SET FIRST_NAME = 'X' WHERE FIRST_NAME = 'GROUCHO';
-- NAMES NOT STARTING WITH A AND HAVING E ADJACENT OR LATER, 1 OR MORE CHARACTERS IN SIZE.
SELECT FIRST_NAME
FROM sakila.actor
WHERE NOT (first_name LIKE 'A%E%' AND first_name LIKE 'A%')
ORDER BY FIRST_NAME DESC;

SELECT FIRST_NAME
FROM sakila.actor
WHERE NOT (first_name LIKE 'A%E%' OR first_name LIKE 'A%')
ORDER BY FIRST_NAME;

-- DISPALY ALL ACTORS WITH FIRST_NAME AS WOODY AND FIRST_NAME AS X
SELECT FIRST_NAME FROM sakila.actor WHERE first_name = 'WOODY' OR FIRST_NAME = 'X';

SELECT * FROM sakila.ADDRESS;
-- ACTORS WITHOUT A SECOND ADDRESS
-- WRONG 
SELECT * FROM sakila.ADDRESS WHERE ADDRESS2 = NULL;
SELECT * FROM sakila.ADDRESS WHERE ADDRESS2 IS NULL;
SELECT * FROM sakila.ADDRESS WHERE NOT ADDRESS2 IS NOT NULL;

-- ACTORS WITH A SECOND ADDRESS
SELECT * FROM sakila.ADDRESS WHERE ADDRESS2 IS NOT NULL;
SELECT * FROM sakila.ADDRESS WHERE NOT ADDRESS2 IS  NULL;

-- DDL STATEMENTS
CREATE DATABASE PROJ1;
USE PROJ1;
CREATE TABLE PRODUCT1
(
	PRODUCT_ID INT(5) PRIMARY KEY,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    PRICE FLOAT NULL
);
SELECT * FROM PRODUCT1;

DESC PRODUCT1;
ALTER TABLE PRODUCT1
MODIFY PRODUCT_ID INT(6);

ALTER TABLE PRODUCT1
MODIFY PRODUCT_NAME VARCHAR(25) NULL;

ALTER TABLE PRODUCT1
CHANGE PRODUCT_NAME PRODUCTNAME1 VARCHAR(20) NOT NULL;

DESC PRODUCT1;
ALTER TABLE PRODUCT1
RENAME COLUMN  PRODUCTNAME1 TO  PRODUCTNAME2;

ALTER TABLE PRODUCT1 
RENAME PRODUCT2;

DROP TABLE PRODUCT2;
-- NULL VALUES
DROP TABLE TEST;
CREATE TABLE TEST(TESTID INT NOT NULL, TEST_NAME VARCHAR(20) NULL);
-- INSERTING ALL COLUMNS
INSERT INTO TEST VALUES (1, 'JAVA');
INSERT INTO TEST VALUES (3, NULL);
-- Error Code: 1048. Column 'TESTID' cannot be null	0.000 sec
INSERT INTO TEST VALUES (NULL, 'SQL');
SELECT * FROM TEST;

-- INSERTING PARTIAL COLUMNS
INSERT INTO TEST (TESTID) VALUES (2);
INSERT INTO TEST (TEST_NAME) VALUES ('GIT');
-- ERRORS 
INSERT INTO TEST  VALUES (2);
INSERT INTO TEST VALUES ('GIT');
-- DIFFERENT COLUMN ORDER
INSERT INTO TEST (TEST_NAME, TESTID) VALUES ('SQL',5);
SELECT TEST_NAME, TESTID FROM TEST;

-- DML
SELECT * FROM TEST;
UPDATE TEST SET TEST_NAME = 'GIT' WHERE TEST_NAME IS NULL;
DELETE FROM TEST WHERE TESTID = 1;
UPDATE TEST SET TEST_NAME = 'AGILE';
DELETE FROM TEST;

